		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

abdelmaseeh hanna abdelmaseeh.hanna@gmail.com	
karim nasser <karim8h@live.com>
ahmed EL Gamal gamoool.95@gmail.com

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

None

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?


When process_execute() is called, with the full string of arguments,
file_name is copied and tokenized. The first token is sent as parameter to
start_process() is called, which takes in a copy of the original string of
arguments and tokenises them, storing them, in order, in the array tokens[][]
(2D array cause its array of arrays of chars).
file_name and tokens are then passed to load() which calls setup_stack() passing
array of tokens to be filled in the stack and esp which is pointing to memory locations.

We decrement esp with length of the argument then memcpy() it. We do the same with
other args and put them in stack in order then add alignments, addresses , argv
argc and finally return adress.

We do not make any checks for memory overflowing. However, we handle 
it by making sure that the command line passed is less than one page in
memory by copying it into a new string of size one page and allocating stack 
of size two pages so there will not be a chance for overflow.





---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?


The only difference between strtok_r() and strtok() is that the save_ptr
(placeholder) in strtok_r() is provided by the caller. 
strtok_r is more threadsafe. It is reentrant, to avoid the case where another 
thread gains control and also calls strtok, which would change the savepointer.
When the original thread regains control, it would pick up where the other 
thread's strtok left off. With strtok_r, we provide the saveptr, so we avoid 
that problem.




>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

It seems cleaner to separate the executable name from the arguments before 
passing it off to the kernel, since they represent different things. It 
shouldn't be the kernel's job to parse that, there's no reason it couldn't be 
done by a user program.

The kernel requires less physical code, since the tokenising code would be
in the shell instead. This would allow the kernel to load faster



			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


/*
	contain information about the process used in the implementation of process_wait, process_execute, process_start
  and the communication between processes.
*/
struct process
{
	pid_t pid;                       /* process id */
	struct list_elem children_elem;  /* list element. To use in the parent's children list */
	struct list children;            /* list of child processes */
	struct list_elem all_elem;       /* hash table element for the all processes table */
	bool parent_exited;              /* true if parent finished execution */
	int return_val;              	 /* current thread_return value */
	struct semaphore *waiting_forme; /* semaphore for parent, if wating for this process */
	bool process_alive;              /* process exited ? */
	char *name;					 	 /* process name */
	bool parent_waited;
	int fd;
};


/* used to make file descriptor for open files */
static int fd_counter = 2 ;


/* list of all processes running in pintos. a child process that exited is also in the list until the parent
exit or wait for it */
static struct list all_processes;


/*
	contain pointer to a file with its file descriptor. to get a file pointer using its file descriptor and get
  a file descriptor form a file pointer for the open and close system calls.
*/
struct file_discriptor
  {
	  
	  int fd ; /*file discriptor number */
	  struct file* file ; /* file struct */ 
	  struct list_elem elem; /*element*/    
  };



>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

a global counter is used which is incremented starting from 2 and its value is given to the
opened file and is saved in a global list that contains all files opened at a time in the system.
file descriptors are unique within the entire OS.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

system call number is found from the first 4 bytes in the process stack, it makes sure that it
is in the user space and is mapped. the same is done for the arguments of the system call and make sure that
the begining and the end end are in the mapped user space.then the return value of the system call is stored in the 
interrupt frame in the variable eax.
each argument is get from the stack pointer which is increneted by the size of it each time and if one of the arguments
is found in the kernel space or in unmapped space the process is exited with -1


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?


The least number of times it could be called is 1, if pagedir_get_page() is 
not used for pointer validation, and all the data is stored on a single page. 
Then memcpy would be passed the pointer returned by pagedir_get_page(), and 
that would be the only call to that function.

The greatest number of times it could be called is 4096, if pagedir_get_page() 
is not used for pointer validation, and the data is distributed in byte-sized 
segments across 4096 pages. Then memcpy would be passed pointers returned by 
pagedir_get_page(), which would be called 4096 times, once for each byte.

If you do use pagedir_get_page() for pointer validation (call it once on the 
pointer and check that it doesn't return null), then the least number of calls 
would be 1, and the max would be 8192 (2*4096).




>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

at first the process id is checked that it belongs to one of the processes running in the system 
and that the process is a child to the process calling the system call. if it is found then that parent
waits in the waiting semaphore of the child process which is initialized to zero, and when that child
process exits, it signals to unblock the wating parent so that it cn continue running. a process
cannot wait for its child more than once, as the process is has a boolean variable that is checked to
find that.


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

of course the 4 bytes containing the systen call number are checked to be in the mapped user space and not null.
then each argument of the system call is checked in the same way to make sure that each one is in the valid space.
for the write system call for example, it is checked that the buffer paramater has its beginning and its end that
is at buffer + length are in the user space so we can write the data in the buffer the file associated with the 
given file descriptor.
if one of the previously mentioned steps fails, the process is ended calling the exit function with -1 exit
code , that function is called when any process in the system exits, which deallocates the resources previously 
allocated to that process and removes it from the global list of processes. 

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

this is done through two varibales associated with each thread in the sytem. the first is a semaphore 
initialized to zero, when the process wants to create another process, it creates its main thread, if it fails
-1 is returned, else, it continues to create the struct of the child process and waits on the semaphore of its
thread, this semaphore is signaled when the process reaches the end of the creation process so that its parent
continues execution. the second variable keeps the value returned, and the parent returns it when it is signaled
through that semaphore.


>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

P creates the thread for C and waits for the creation of the child process through the semaphore
associated with it, this semaphore is signaled when the child process is created, so it is impossible for the
process P to wait for its child before it is created. after it is created, process P downs the semaphore 
associated with its child process C so it waits for it. then P is signaled when C exits in the process_exit
function. while after C exits, it still exist in the list of all processes till its parent exits, so that
its parent finds its child's return value and of course in that case it does not wait. resources of
process are freed in the process_exit function, so all cases where a process exits, its resources are
deallocated.there are no special cases, these steps handle all cases.



---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

it is easier to implement and to extend in case it is fails some tests. and is more specific, the other way 
requires handling the falure after it occures and call exit for the bad process but that is done for any bad
process that causes page faults. verification is done in the system call handler.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

it is easier to implement and to extend in case it is fails some tests. and is more specific, the other way 
requires handling the falure after it occures and call exit for the bad process but that is done for any bad
process that causes page faults. But it requires more code and more cases to handle. 

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

no change is made to the default mapping. a process id is the the value of the thread id that created the
process, there is no need to change it.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
